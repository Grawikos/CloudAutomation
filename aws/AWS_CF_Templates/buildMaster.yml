AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 Instances Deployment with EFS Mount via Mount Target IPs

Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64'

Resources:
  MasterInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for master node"
      VpcId: !ImportValue MyBase:VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  BuildInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.small
      ImageId: !Ref LatestAmiId
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda" 
          Ebs:
            VolumeSize: 16
            VolumeType: gp3 
            DeleteOnTermination: true 
      KeyName: vockey
      SubnetId: !ImportValue MyBase:PrivateSubnet1
      IamInstanceProfile: LabInstanceProfile
      SecurityGroupIds:
        - !Ref MasterInstanceSecurityGroup
      Tags:
        - Key: Name
          Value: BuildInstance
      UserData:
        Fn::Base64: !Sub 
        - |
          #!/bin/bash
          #EFS
          yum update -y
          mkdir -p -m 777 /mnt/efs
          mount -t nfs4 ${EFS}:/ /mnt/efs
          chmod -R 777 mnt/

          #APP
          yum install git -y
          yum install -y dotnet6.0
          
          git clone https://github.com/looking4ward/CloudShirt.git
          yum install docker -y
          systemctl start docker
          systemctl enable docker
          docker swarm init
          docker swarm join-token worker -q > /mnt/efs/swarm-token
          echo $HOSTNAME | grep -Eo '[[:digit:]]+-[[:digit:]]+-[[:digit:]]+-[[:digit:]]+' | head -n 1 | tr '-' '.' > mnt/efs/masterip.txt
          
          curl -O https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-cli-linux-x86_64.tar.gz
          tar -xf google-cloud-cli-linux-x86_64.tar.gz
          ./google-cloud-sdk/install.sh -q
          export PATH="/root/.local/bin:/root/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/var/lib/snapd/snap/bin:/root/.dotnet/tools:/root/google-cloud-sdk/bin:/google-cloud-sdk/bin"
          gcloud config set project firstproject-450511 #############################################
          aws ssm get-parameter --name "/gcp/service-account/json" --with-decryption --query 'Parameter.Value' --output text > /root/gcp-service-account.json
          chmod 400 /root/gcp-service-account.json
          export GOOGLE_APPLICATION_CREDENTIALS="/root/gcp-service-account.json"
          gcloud auth activate-service-account --key-file=/root/gcp-service-account.json
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet
          
          sudo -i -u ec2-user bash <<EOF
              source ~/.bashrc  
              cd /
              dotnet tool install --global dotnet-ef --version 7.0.20
              cd CloudShirt
              sudo yum install -y docker
              sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              docker-compose version
              sudo systemctl start docker
          EOF

          cat <<EOF > /CloudShirt/build_and_push.sh
          cd /
          cd CloudShirt
          git reset --hard
          git pull
          cd ..
          sudo chmod -R 777 /CloudShirt
          sed -i 's/Server.*CatalogDb;/Server=${RDSENDPOINT},1433;User ID=sa;Password=praktyka;Initial Catalog=Microsoft.eShopOnWeb.CatalogDb;/' /CloudShirt/src/Web/appsettings.json
          sed -i 's/Server.*Identity;/Server=${RDSENDPOINT},1433;User ID=sa;Password=praktyka;Initial Catalog=Microsoft.eShopOnWeb.Identity;/' /CloudShirt/src/Web/appsettings.json
          sed -i 's/SA_PASSWORD=@someThingComplicated1234/SA_PASSWORD=praktyka/' /CloudShirt/docker-compose.yml
          sed -i 's/Server.*false;/Server=${RDSENDPOINT},1433;User ID=sa;Password=praktyka;Initial Catalog=Microsoft.eShopOnWeb.CatalogDb;/' /CloudShirt/src/Web/appsettings.Docker.json
          sed -i 's/Server.*false;/Server=${RDSENDPOINT},1433;User ID=sa;Password=praktyka;Initial Catalog=Microsoft.eShopOnWeb.Identity;/' /CloudShirt/src/Web/appsettings.Docker.json
          sed -i 's/webBase.*5106/webBase": "http:\/\/*:80/' /CloudShirt/src/Web/appsettings.Docker.json
          sed -i 's/5106:80/80:80/' /CloudShirt/docker-compose.override.yml 
          sudo -i -u ec2-user bash <<EOF2
              source ~/.bashrc  
              cd /
              cd CloudShirt/src/Web/
              dotnet restore
              dotnet tool restore
              dotnet ef database update -c catalogcontext -p ../Infrastructure/Infrastructure.csproj -s Web.csproj
              dotnet ef database update -c appidentitydbcontext -p ../Infrastructure/Infrastructure.csproj -s Web.csproj
          EOF2
          cd CloudShirt
          docker-compose build
          # AWS_REGION=us-east-1
          aws ecr get-login-password --region us-east-1 | \
          docker login --username AWS --password-stdin ${ECRRegistry}
          docker tag eshopwebmvc:latest ${ECRRepositoryUri}:latest
          docker push ${ECRRepositoryUri}:latest

          docker tag eshopwebmvc:latest us-central1-docker.pkg.dev/firstproject-450511/my-app-repo/eshopwebmvc:latest
          docker push us-central1-docker.pkg.dev/firstproject-450511/my-app-repo/eshopwebmvc:latest          

          docker image prune -af
          docker builder prune -af
          docker container prune -f
          docker volume prune -f

          EOF
          
          chmod 777 /CloudShirt/build_and_push.sh
          cd /
          ./CloudShirt/build_and_push.sh

          # sed -i "s/imag.*mvc/image: ${ECRRepositoryUri}:latest" docker-compose.yml

          cat <<'EOF' > /etc/systemd/system/docker-build.service
          [Unit]
          Description=Build and push Docker image to ECR
          After=network.target docker.service
          Wants=docker.service

          [Service]
          WorkingDirectory=/CloudShirt
          ExecStart=/bin/bash /CloudShirt/build_and_push.sh
          Restart=always
          StandardOutput=append:/var/log/docker-build.log
          StandardError=append:/var/log/docker-build-error.log
          EOF

          # Create the timer unit
          cat <<'EOF' > /etc/systemd/system/docker-build.timer
          [Unit]
          Description=Run Docker build and push every 5 minutes

          [Timer]
          #OnBootSec=1min
          #OnUnitActiveSec=10min
          OnCalendar=*-*-* 03:00:00
          Persistent=true

          [Install]
          WantedBy=timers.target
          EOF

          # Reload systemd to pick up new units
          systemctl daemon-reload

          # Enable and start the timer
          systemctl enable --now docker-build.timer

          # Optional: list all timers for verification
          systemctl list-timers --all

        - EFS: !ImportValue EFS:EFS-DNS
          RDSENDPOINT: !ImportValue RDS:MSSQLServer
          BUCKET: !ImportValue S3Athena:PartnerDataBucket
          ECRRegistry: !ImportValue ECR:Registry
          ECRRepositoryUri: !ImportValue ECR:MyRepositoryUri


