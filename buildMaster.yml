AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 Instances Deployment with EFS Mount via Mount Target IPs

Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64'


Resources:

  BuildInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.small
      ImageId: !Ref LatestAmiId
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"  # Root volume (may be /dev/sda1 in some cases)
          Ebs:
            VolumeSize: 16
            VolumeType: gp3 
            DeleteOnTermination: true 
      KeyName: vockey
      SubnetId: !ImportValue MyBase:MyFirstSubnet
      IamInstanceProfile: LabInstanceProfile
      
      SecurityGroupIds:
        - !ImportValue MyBase:MySecurityGroup
      Tags:
        - Key: Name
          Value: BiuldInstance
      UserData:
        Fn::Base64: !Sub 
        - |
          #!/bin/bash
          #EFS
          yum update -y
          mkdir -p -m 777 /mnt/efs
          mount -t nfs4 ${EFS}:/ /mnt/efs
          chmod -R 777 mnt/

          #APP
          yum install git -y
          git clone https://github.com/looking4ward/CloudShirt.git
          sed -i 's/Server.*CatalogDb;/Server=${RDSENDPOINT},1433;User ID=sa;Password=praktyka;Initial Catalog=Microsoft.eShopOnWeb.CatalogDb;/' /CloudShirt/src/Web/appsettings.json
          sed -i 's/Server.*Identity;/Server=${RDSENDPOINT},1433;User ID=sa;Password=praktyka;Initial Catalog=Microsoft.eShopOnWeb.Identity;/' /CloudShirt/src/Web/appsettings.json
          yum install -y dotnet6.0
          chmod -R 777 /CloudShirt
          sed -i 's/SA_PASSWORD=@someThingComplicated1234/SA_PASSWORD=praktyka/' /CloudShirt/docker-compose.yml
          sed -i 's/Server.*false;/Server=${RDSENDPOINT},1433;User ID=sa;Password=praktyka;Initial Catalog=Microsoft.eShopOnWeb.CatalogDb;/' /CloudShirt/src/Web/appsettings.Docker.json
          sed -i 's/Server.*false;/Server=${RDSENDPOINT},1433;User ID=sa;Password=praktyka;Initial Catalog=Microsoft.eShopOnWeb.Identity;/' /CloudShirt/src/Web/appsettings.Docker.json
          sed -i 's/webBase.*5106/webBase": "http:\/\/*:80/' /CloudShirt/src/Web/appsettings.Docker.json
          sed -i 's/5106:80/80:80/' /CloudShirt/docker-compose.override.yml 

          yum install docker -y
          systemctl start docker
          systemctl enable docker

          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 089087866202.dkr.ecr.us-east-1.amazonaws.com
          docker swarm init
          docker swarm join-token worker -q > /mnt/efs/swarm-token
          echo $HOSTNAME | grep -Eo '[[:digit:]]+-[[:digit:]]+-[[:digit:]]+-[[:digit:]]+' | head -n 1 | tr '-' '.' > mnt/efs/masterip.txt

          sudo -i -u ec2-user bash <<EOF
              source ~/.bashrc  
              cd /
              dotnet tool install --global dotnet-ef --version 7.0.20
              cd CloudShirt/src/Web/
              dotnet restore
              dotnet tool restore
              dotnet ef database update -c catalogcontext -p ../Infrastructure/Infrastructure.csproj -s Web.csproj
              dotnet ef database update -c appidentitydbcontext -p ../Infrastructure/Infrastructure.csproj -s Web.csproj
              cd ../..
              sudo yum install -y docker
              sudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
              docker-compose version
              sudo systemctl start docker
          EOF
          cd CloudShirt
          docker-compose build

          AWS_REGION=us-east-1
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          echo "Account ID: $AWS_ACCOUNT_ID, Region: $AWS_REGION"

          aws ecr get-login-password --region $AWS_REGION | \
          docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

          docker tag eshopwebmvc:latest $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/test-repository:latest
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/test-repository:latest

          sed -i "s/imag.*mvc/image: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com\/test-repository:latest/" docker-compose.yml

          cat <<EOF > /etc/systemd/system/docker-build.service
          [Unit]
          Description=Build and push Docker image to ECR
          After=network.target docker.service
          Wants=docker.service

          [Service]
          User=ec2-user
          WorkingDirectory=/CloudShirt
          ExecStart=/bin/bash /CloudShirt/build_and_push.sh
          Restart=always
          EOF

          cat <<EOF > /etc/systemd/system/docker-build.timer
          [Unit]
          Description=Run Docker build and push every night

          [Timer]
          OnCalendar=*-*-* 03:00:00
          Persistent=true

          [Install]
          WantedBy=timers.target
          EOF

          systemctl daemon-reload
          systemctl enable --now docker-build.timer
          systemctl list-timers --all

          cat <<EOF > /CloudShirt/build_and_push.sh
          #!/bin/bash

          # Set variables
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          AWS_REGION=us-east-1
          ECR_REPO="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/test-repository"

          # Ensure Docker is running
          sudo systemctl start docker

          # Pull latest code from GitHub
          cd /CloudShirt
          git reset --hard
          git pull origin main  # Change branch if needed

          # Build the Docker image
          sudo docker-compose build

          # Authenticate with ECR and push image
          aws ecr get-login-password --region $AWS_REGION | \
              sudo docker login --username AWS --password-stdin $ECR_REPO
          sudo docker tag $(sudo docker images -q | head -n 1) $ECR_REPO:latest
          sudo docker push $ECR_REPO:latest

          # Save Master IP to EFS for worker node
          # curl -s http://169.254.169.254/latest/meta-data/local-ipv4 > /mnt/efs/masterip.txt
          EOF
          chmod +x /CloudShirt/build_and_push.sh

        - EFS: !ImportValue MyEFS-DNS 
          RDSENDPOINT: !ImportValue SSMS:MyDB



