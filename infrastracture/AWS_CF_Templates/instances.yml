Description: Instances for the App in AutoScalingGroup

Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64'

Resources:
  WorkerInstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Security group for worker nodes: allows SSH and swarm communications"
      VpcId: !ImportValue MyBase:VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  AppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: t2.small
        BlockDeviceMappings:
          - DeviceName: "/dev/xvda"
            Ebs:
              VolumeSize: 16
              VolumeType: gp3 
              DeleteOnTermination: true 
        KeyName: vockey
        IamInstanceProfile: 
          Name : LabInstanceProfile
        SecurityGroupIds:
          - !Ref WorkerInstanceSecurityGroup
        UserData:
          Fn::Base64: !Sub 
          - |
            #!/bin/bash
            yum update -y

            ### EFS
            mkdir -p -m 777 /mnt/efs
            mount -t nfs4 ${EFS}:/ /mnt/efs
            chmod -R 777 mnt/

            #BCP
            curl https://packages.microsoft.com/config/rhel/9/prod.repo | sudo tee /etc/yum.repos.d/mssql-release.repo
            yum remove mssql-tools unixODBC-utf16 unixODBC-utf16-devel
            export ACCEPT_EULA=Y
            yes | yum install -y mssql-tools18 unixODBC-devel
            yum check-update
            yum update mssql-tools18
            echo 'export PATH="$PATH:/opt/mssql-tools18/bin"' >> ~/.bashrc
            source ~/.bashrc
            cd /
            mkdir -m 777 athenafolder
            # Hourly put data to S3
            cat <<EOF > /usr/local/bin/upload_to_s3.sh
            #!/bin/bash
            bcp orders out /athenafolder/out.txt -c -u -U sa -P praktyka -S ${RDSENDPOINT} -d Microsoft.eShopOnWeb.CatalogDb
            
            if [ -f "/athenafolder/out.txt" ]; then
              aws s3 cp /athenafolder/out.txt s3://${BUCKET}/
              echo "$(date) - Uploaded /athenafolder/out.txt to ${BUCKET}/" >> /var/log/s3_upload.log
            else
              echo "$(date) - File not found: /athenafolder/out.txt" >> /var/log/s3_upload.log
            fi
            EOF

            chmod +x /usr/local/bin/upload_to_s3.sh

            cat <<EOF > /etc/systemd/system/upload-to-s3.service
            [Unit]
            Description=Upload data to S3
            After=network.target

            [Service]
            Type=oneshot
            User=root
            Environment="PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/opt/mssql-tools18/bin"
            ExecStart=/usr/local/bin/upload_to_s3.sh
            EOF

            # Create a systemd timer to run the service every hour
            cat <<EOF > /etc/systemd/system/upload-to-s3.timer
            [Unit]
            Description=Run upload-to-s3.service every hour

            [Timer]
            OnBootSec=1min
            OnUnitActiveSec=60min
            Persistent=true

            [Install]
            WantedBy=timers.target
            EOF

            # Reload systemd, enable and start the timer
            systemctl daemon-reload
            systemctl enable --now upload-to-s3.timer
            systemctl start upload-to-s3.timer

            ### APP
            yum install docker -y
            systemctl start docker
            systemctl enable docker
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ECRRegistry}
            docker swarm join --token  "$(< /mnt/efs/swarm-token)" $(< mnt/efs/masterip.txt):2377

            AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
            AWS_REGION=us-east-1

            docker pull ${ECRRepositoryUri}:latest

            curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose

            mkdir CloudShirt

            cat  <<EOF > /CloudShirt/docker-compose.yml
            version: '3.4'

            services:
              eshopwebmvc:
                image: ${ECRRepositoryUri}:latest
                depends_on:
                  - "sqlserver"

            #  eshoppublicapi:
            #    image: ${ECRRepositoryUri}:publicapi-latest
            #    depends_on:
            #      - "sqlserver"

              sqlserver:
                image: mcr.microsoft.com/azure-sql-edge
                ports:
                  - "1433:1433"
                environment:
                  - SA_PASSWORD=praktyka
                  - ACCEPT_EULA=Y

            EOF

            cat  <<EOF > /CloudShirt/docker-compose.override.yml
            version: '3.4'
            services:
              eshopwebmvc:
                environment:
                  - ASPNETCORE_ENVIRONMENT=Docker
                  - ASPNETCORE_URLS=http://+:80
                ports:
                  - "80:80"
                volumes:
                  - ~/.aspnet/https:/root/.aspnet/https:ro
                  - ~/.microsoft/usersecrets:/root/.microsoft/usersecrets:ro

            EOF
            cd CloudShirt
            docker-compose up > /mnt/efs/log.log

          - EFS: !ImportValue EFS:EFS-DNS
            RDSENDPOINT: !ImportValue RDS:MSSQLServer
            BUCKET: !ImportValue S3Athena:PartnerDataBucket
            ECRRegistry: !ImportValue ECR:Registry
            ECRRepositoryUri: !ImportValue ECR:MyRepositoryUri

  AppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !ImportValue MyBase:PublicSubnet1
        - !ImportValue MyBase:PublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref AppLaunchTemplate
        Version: !GetAtt AppLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 2
      DesiredCapacity: 2
      # HealthCheckType: ELB
      # HealthCheckGracePeriod: 300
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      Tags:
        - Key: Name
          Value: AutoScaledInstance
          PropagateAtLaunch: true

  ScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      PolicyName: scale-out
      AutoScalingGroupName: !Ref AppAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        TargetValue: 5000  
        PredefinedMetricSpecification:
          PredefinedMetricType: ALBRequestCountPerTarget
          ResourceLabel: !Join 
            - '/' 
            - - !GetAtt ApplicationLoadBalancer.LoadBalancerFullName
              - !GetAtt ALBTargetGroup.TargetGroupFullName

  ScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      PolicyName: scale-in
      AutoScalingGroupName: !Ref AppAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        TargetValue: 500 
        PredefinedMetricSpecification:
          PredefinedMetricType: ALBRequestCountPerTarget
          ResourceLabel: !Join 
            - '/' 
            - - !GetAtt ApplicationLoadBalancer.LoadBalancerFullName
              - !GetAtt ALBTargetGroup.TargetGroupFullName

  ScheduledActionOut: 
      Type: AWS::AutoScaling::ScheduledAction
      Properties:
        AutoScalingGroupName: !Ref AppAutoScalingGroup
        MaxSize: '6'
        MinSize: '2'
        DesiredCapacity: '4'
        Recurrence: "0 18 * * *"
        TimeZone: US/Eastern

  ScheduledActionIn: 
      Type: AWS::AutoScaling::ScheduledAction
      Properties:
        AutoScalingGroupName: !Ref AppAutoScalingGroup
        MaxSize: '2'
        MinSize: '1'
        DesiredCapacity: '2'
        Recurrence: "0 20 * * *"
        TimeZone: US/Eastern

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic
      VpcId: !ImportValue MyBase:VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: MyLoadBalancerSG

  ApplicationLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: MarcinMaciejShop
        Scheme: internet-facing
        Type: application
        SecurityGroups:
          - !Ref LoadBalancerSecurityGroup
        Subnets:
          - !ImportValue MyBase:PublicSubnet1
          - !ImportValue MyBase:PublicSubnet2
        Tags:
          - Key: Name
            Value: myLoadBalancer

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue MyBase:VPC
      Protocol: HTTP
      Port: 80
      HealthCheckProtocol: HTTP
      HealthCheckPort: 80
      HealthCheckPath: "/"
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: 2137
      Tags:
        - Key: Name
          Value: MyTargetGroup

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup


Outputs:
  LoadBalancerDNS:
    Description: "DNS name of the ALB"
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", ApplicationLoadBalancer, DNS ] ]