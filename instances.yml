Description: Instances for the App in AutoScalingGroup

Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64'

Resources:
  myLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: t2.small
        BlockDeviceMappings:
          - DeviceName: "/dev/xvda"  # Root volume (may be /dev/sda1 in some cases)
            Ebs:
              VolumeSize: 16
              VolumeType: gp3 
              DeleteOnTermination: true 
        KeyName: vockey
        IamInstanceProfile: 
          Name : LabInstanceProfile
        
        SecurityGroupIds:
          - !ImportValue MyBase:MySecurityGroup
        UserData:
          Fn::Base64: !Sub 
          - |
            #!/bin/bash
            yum update -y
            mkdir -p -m 777 /mnt/efs
            mount -t nfs4 ${EFS}:/ /mnt/efs
            chmod -R 777 mnt/

            yum install docker -y
            systemctl start docker
            systemctl enable docker
            aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 089087866202.dkr.ecr.us-east-1.amazonaws.com
            docker swarm join --token  "$(< /mnt/efs/swarm-token)" $(< mnt/efs/masterip.txt):2377

            AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
            AWS_REGION=us-east-1
            ECR_REPO="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/test-repository"

            docker pull $ECR_REPO:latest

            curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose

            mkdir CloudShirt

            cat  <<EOF > /CloudShirt/docker-compose.yml
            version: '3.4'

            services:
              eshopwebmvc:
                image: 089087866202.dkr.ecr.us-east-1.amazonaws.com/test-repository:latest
                depends_on:
                  - "sqlserver"

            #  eshoppublicapi:
            #    image: 089087866202.dkr.ecr.us-east-1.amazonaws.com/test-repository:publicapi-latest
            #    depends_on:
            #      - "sqlserver"

              sqlserver:
                image: mcr.microsoft.com/azure-sql-edge
                ports:
                  - "1433:1433"
                environment:
                  - SA_PASSWORD=praktyka
                  - ACCEPT_EULA=Y

            EOF

            cat  <<EOF > /CloudShirt/docker-compose.override.yml
            version: '3.4'
            services:
              eshopwebmvc:
                environment:
                  - ASPNETCORE_ENVIRONMENT=Docker
                  - ASPNETCORE_URLS=http://+:80
                ports:
                  - "80:80"
                volumes:
                  - ~/.aspnet/https:/root/.aspnet/https:ro
                  - ~/.microsoft/usersecrets:/root/.microsoft/usersecrets:ro

            EOF
            cd CloudShirt
            docker-compose up -d

          - EFS: !ImportValue MyEFS-DNS 
            RDSENDPOINT: !ImportValue SSMS:MyDB


  myAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !ImportValue MyBase:MyFirstSubnet
        - !ImportValue MyBase:MySecondSubnet
      LaunchTemplate:
        LaunchTemplateId: !Ref myLaunchTemplate
        Version: !GetAtt myLaunchTemplate.LatestVersionNumber
      MinSize: 2
      MaxSize: 2
      DesiredCapacity: 2
      # HealthCheckType: ELB
      # HealthCheckGracePeriod: 300
      TargetGroupARNs:
        - !Ref myALBTargetGroup
      Tags:
        - Key: Name
          Value: AutoScaledInstance
          PropagateAtLaunch: true

  ScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      PolicyName: scale-out
      AutoScalingGroupName: !Ref myAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        TargetValue: 5000  
        PredefinedMetricSpecification:
          PredefinedMetricType: ALBRequestCountPerTarget
          ResourceLabel: !Join 
            - '/' 
            - - !GetAtt myApplicationLoadBalancer.LoadBalancerFullName
              - !GetAtt myALBTargetGroup.TargetGroupFullName

  ScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      PolicyName: scale-in
      AutoScalingGroupName: !Ref myAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        TargetValue: 500 
        PredefinedMetricSpecification:
          PredefinedMetricType: ALBRequestCountPerTarget
          ResourceLabel: !Join 
            - '/' 
            - - !GetAtt myApplicationLoadBalancer.LoadBalancerFullName
              - !GetAtt myALBTargetGroup.TargetGroupFullName

  ScheduledActionOut: 
      Type: AWS::AutoScaling::ScheduledAction
      Properties:
        AutoScalingGroupName: !Ref myAutoScalingGroup
        MaxSize: '6'
        MinSize: '2'
        DesiredCapacity: '4'
        Recurrence: "0 18 * * *"
        TimeZone: US/Eastern

  ScheduledActionIn: 
      Type: AWS::AutoScaling::ScheduledAction
      Properties:
        AutoScalingGroupName: !Ref myAutoScalingGroup
        MaxSize: '2'
        MinSize: '2'
        DesiredCapacity: '2'
        Recurrence: "0 20 * * *"
        TimeZone: US/Eastern

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic
      VpcId: !ImportValue MyBase:VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: MyLoadBalancerSG

  myApplicationLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: myALB
        Scheme: internet-facing
        Type: application
        SecurityGroups:
          - !Ref LoadBalancerSecurityGroup
        Subnets:
          - !ImportValue MyBase:MyFirstSubnet
          - !ImportValue MyBase:MySecondSubnet
        Tags:
          - Key: Name
            Value: myLoadBalancer

  myALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue MyBase:VPC
      Protocol: HTTP
      Port: 80
      HealthCheckProtocol: HTTP
      HealthCheckPort: 80
      HealthCheckPath: "/"
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: 2137
      Tags:
        - Key: Name
          Value: MyTargetGroup

  myALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref myApplicationLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref myALBTargetGroup


Outputs:
  LoadBalancerDNS:
    Description: "DNS name of the ALB"
    Value: !GetAtt myApplicationLoadBalancer.DNSName
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", myApplicationLoadBalancer, DNS ] ]
