Description: Instances for the VPC in AutoScalingGroup

Parameters:
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64'

Resources:
  AppLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: t2.small
        KeyName: vockey
        IamInstanceProfile: 
          Name : LabInstanceProfile
        
        SecurityGroupIds:
          - !ImportValue EFS:ApplicationSecurityGroup
        UserData:
          Fn::Base64: !Sub 
          - |
            #!/bin/bash
            #EFS
            yum update -y
            mkdir -p -m 777 /mnt/efs
            mount -t nfs4 ${EFS}:/ /mnt/efs
            chmod -R 777 mnt/

            #BCP
            curl https://packages.microsoft.com/config/rhel/9/prod.repo | sudo tee /etc/yum.repos.d/mssql-release.repo
            yum remove mssql-tools unixODBC-utf16 unixODBC-utf16-devel
            export ACCEPT_EULA=Y
            yes | yum install -y mssql-tools18 unixODBC-devel
            yum check-update
            yum update mssql-tools18
            echo 'export PATH="$PATH:/opt/mssql-tools18/bin"' >> ~/.bashrc
            source ~/.bashrc
            cd /
            mkdir -m 777 athenafolder
            
            #Hourly put data to S3
            cat <<EOF > /usr/local/bin/upload_to_s3.sh
            #!/bin/bash
            bcp orders out /athenafolder/out.txt -c -u -U sa -P praktyka -S ${RDSENDPOINT} -d Microsoft.eShopOnWeb.CatalogDb
            
            if [ -f "/athenafolder/out.txt" ]; then
              aws s3 cp /athenafolder/out.txt s3://${BUCKET}/
              echo "$(date) - Uploaded /athenafolder/out.txt to ${BUCKET}/" >> /var/log/s3_upload.log
            else
              echo "$(date) - File not found: /athenafolder/out.txt" >> /var/log/s3_upload.log
            fi
            EOF

            chmod +x /usr/local/bin/upload_to_s3.sh

            cat <<EOF > /etc/systemd/system/upload-to-s3.service
            [Unit]
            Description=Upload data to S3
            After=network.target

            [Service]
            Type=oneshot
            User=root
            Environment="PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/opt/mssql-tools18/bin"
            ExecStart=/usr/local/bin/upload_to_s3.sh
            EOF

            # Create a systemd timer to run the service every hour
            cat <<EOF > /etc/systemd/system/upload-to-s3.timer
            [Unit]
            Description=Run upload-to-s3.service every hour

            [Timer]
            OnBootSec=1min
            OnUnitActiveSec=10min
            Persistent=true

            [Install]
            WantedBy=timers.target
            EOF

            # Reload systemd, enable and start the timer
            systemctl daemon-reload
            systemctl enable --now upload-to-s3.timer
            systemctl start upload-to-s3.timer

            #APP
            yum install git -y
            git clone https://github.com/looking4ward/CloudShirt.git
            sed -i 's/Server.*CatalogDb;/Server=${RDSENDPOINT},1433;User ID=sa;Password=praktyka;Initial Catalog=Microsoft.eShopOnWeb.CatalogDb;/' /CloudShirt/src/Web/appsettings.json
            sed -i 's/Server.*Identity;/Server=${RDSENDPOINT},1433;User ID=sa;Password=praktyka;Initial Catalog=Microsoft.eShopOnWeb.Identity;/' /CloudShirt/src/Web/appsettings.json
            yum install -y dotnet6.0
            chmod -R 777 /CloudShirt
            sudo -i -u ec2-user bash <<EOF
              source ~/.bashrc  
              cd /
              dotnet tool install --global dotnet-ef --version 7.0.20
              cd CloudShirt/src/Web/
              dotnet restore
              dotnet tool restore
              dotnet ef database update -c catalogcontext -p ../Infrastructure/Infrastructure.csproj -s Web.csproj
              dotnet ef database update -c appidentitydbcontext -p ../Infrastructure/Infrastructure.csproj -s Web.csproj
              dotnet build
              sudo dotnet run --urls "http://*:80" > /mnt/efs/log.log
            EOF

          - EFS: !ImportValue EFS:EFS-DNS
            RDSENDPOINT: !ImportValue RDS:MSSQLServer
            BUCKET: !ImportValue S3Athena:PartnerDataBucket


  AppAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !ImportValue MyBase:PublicSubnet1
        - !ImportValue MyBase:PublicSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref AppLaunchTemplate
        Version: !GetAtt AppLaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 2
      DesiredCapacity: 2
      # HealthCheckType: ELB
      # HealthCheckGracePeriod: 300
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      Tags:
        - Key: Name
          Value: AutoScaledInstance
          PropagateAtLaunch: true

  ScaleOutPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      PolicyName: scale-out
      AutoScalingGroupName: !Ref AppAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        TargetValue: 5000  
        PredefinedMetricSpecification:
          PredefinedMetricType: ALBRequestCountPerTarget
          ResourceLabel: !Join 
            - '/' 
            - - !GetAtt ApplicationLoadBalancer.LoadBalancerFullName
              - !GetAtt ALBTargetGroup.TargetGroupFullName

  ScaleInPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      PolicyName: scale-in
      AutoScalingGroupName: !Ref AppAutoScalingGroup
      PolicyType: TargetTrackingScaling
      TargetTrackingConfiguration:
        TargetValue: 500 
        PredefinedMetricSpecification:
          PredefinedMetricType: ALBRequestCountPerTarget
          ResourceLabel: !Join 
            - '/' 
            - - !GetAtt ApplicationLoadBalancer.LoadBalancerFullName
              - !GetAtt ALBTargetGroup.TargetGroupFullName

  ScheduledActionOut: 
      Type: AWS::AutoScaling::ScheduledAction
      Properties:
        AutoScalingGroupName: !Ref AppAutoScalingGroup
        MaxSize: '6'
        MinSize: '2'
        DesiredCapacity: '4'
        Recurrence: "0 18 * * *"
        TimeZone: US/Eastern

  ScheduledActionIn: 
      Type: AWS::AutoScaling::ScheduledAction
      Properties:
        AutoScalingGroupName: !Ref AppAutoScalingGroup
        MaxSize: '2'
        MinSize: '1'
        DesiredCapacity: '2'
        Recurrence: "0 20 * * *"
        TimeZone: US/Eastern

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic
      VpcId: !ImportValue MyBase:VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: MyLoadBalancerSG

  ApplicationLoadBalancer:
      Type: AWS::ElasticLoadBalancingV2::LoadBalancer
      Properties:
        Name: MarcinMaciejShop
        Scheme: internet-facing
        Type: application
        SecurityGroups:
          - !Ref LoadBalancerSecurityGroup
        Subnets:
          - !ImportValue MyBase:PublicSubnet1
          - !ImportValue MyBase:PublicSubnet2
        Tags:
          - Key: Name
            Value: myLoadBalancer

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: !ImportValue MyBase:VPC
      Protocol: HTTP
      Port: 80
      HealthCheckProtocol: HTTP
      HealthCheckPort: 80
      HealthCheckPath: "/"
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: true
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: 2137
      Tags:
        - Key: Name
          Value: MyTargetGroup

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup


Outputs:
  LoadBalancerDNS:
    Description: "DNS name of the ALB"
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", ApplicationLoadBalancer, DNS ] ]
